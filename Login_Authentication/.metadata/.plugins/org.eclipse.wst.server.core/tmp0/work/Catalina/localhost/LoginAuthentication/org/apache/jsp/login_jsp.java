/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.28
 * Generated at: 2024-12-06 18:17:51 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>Login Form</title>\r\n");
      out.write("<link rel=\"stylesheet\"\r\n");
      out.write("	href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.1/css/all.min.css\"\r\n");
      out.write("	integrity=\"sha512-5Hs3dF2AEPkpNAR7UiOHba+lRSJNeM2ECkwxUIxC1Q/FLycGTbNapWXB4tP889k5T5Ju8fs4b1P5z/iB4nMfSQ==\"\r\n");
      out.write("	crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" />\r\n");
      out.write("\r\n");
      out.write("<script type=\"module\"\r\n");
      out.write("	src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.esm.js\"></script>\r\n");
      out.write("<script nomodule\r\n");
      out.write("	src=\"https://unpkg.com/ionicons@7.1.0/dist/ionicons/ionicons.js\"></script>\r\n");
      out.write("<link rel=\"stylesheet\" href=\"style.css\">\r\n");
      out.write("\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<div class=\"wrapper\">\r\n");
      out.write("		<span class=\"icon-close\"> &times; </span>\r\n");
      out.write("		<div class=\"form-box login\">\r\n");
      out.write("			<h2>Login</h2>\r\n");
      out.write("			<form action=\"LoginServlet\" method=\"post\">\r\n");
      out.write("				<div class=\"input-box\">\r\n");
      out.write("					<span class=\"icon\"><ion-icon name=\"mail-outline\"></ion-icon></span>\r\n");
      out.write("					<input type=\"text\" name=\"mail\" required autocomplete=\"off\">\r\n");
      out.write("					<label>Email</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"input-box\">\r\n");
      out.write("					<span class=\"icon\"><ion-icon name=\"lock-closed-outline\"></ion-icon></span>\r\n");
      out.write("					<input type=\"password\" name=\"pass\" required> <label>Password</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"remember-forgot\">\r\n");
      out.write("					<label for=\"\"><input type=\"checkbox\">Remind Me </label> <a\r\n");
      out.write("						href=\"#\">Forgot Password?</a>\r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<button type=\"submit\" class=\"btn\">Login</button>\r\n");
      out.write("				<div class=\"login-register\">\r\n");
      out.write("					<p>\r\n");
      out.write("						Don't have an account ?<a href=\"#\" class=\"register-link\">Register</a>\r\n");
      out.write("					</p>\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("\r\n");
      out.write("		<div class=\"form-box register\">\r\n");
      out.write("			<h2>Register</h2>\r\n");
      out.write("			<form action=\"RegisterServlet\" method=\"post\">\r\n");
      out.write("\r\n");
      out.write("				<div class=\"input-box\">\r\n");
      out.write("					<span class=\"icon\"><ion-icon name=\"person\"></ion-icon></span> <input\r\n");
      out.write("						type=\"text\" name=\"username\" required autocomplete=\"off\"> <label>Username</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"input-box\">\r\n");
      out.write("					<span class=\"icon\"><ion-icon name=\"mail-outline\"></ion-icon></span>\r\n");
      out.write("					<input type=\"text\" name=\"Rmail\" required autocomplete=\"off\">\r\n");
      out.write("					<label>Email</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"input-box\">\r\n");
      out.write("					<span class=\"icon\"><ion-icon name=\"lock-closed-outline\"></ion-icon></span>\r\n");
      out.write("					<input type=\"password\" name=\"Rpass\" required> <label>Password</label>\r\n");
      out.write("				</div>\r\n");
      out.write("				<div class=\"remember-forgot\">\r\n");
      out.write("					<label for=\"\"><input type=\"checkbox\">I agree to the\r\n");
      out.write("						terms and conditions \r\n");
      out.write("				</div>\r\n");
      out.write("\r\n");
      out.write("				<button type=\"submit\" class=\"btn\" onclick=\"check()\">Register</button>\r\n");
      out.write("				<div class=\"login-register\">\r\n");
      out.write("					<p>\r\n");
      out.write("						Already have an account ?<a href=\"#\" class=\"login-link\">Login</a>\r\n");
      out.write("					</p>\r\n");
      out.write("				</div>\r\n");
      out.write("			</form>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("	<script src=\"script.js\"></script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
